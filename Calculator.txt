import sympy as sp
from tkinter import *
import tkinter as tk
import math as mp
from fractions import Fraction
import numpy as np

calculator = Tk()
calculator.title("Calculator")
calculator.geometry("295x445")
calculator.configure(bg="grey14")
calculator.resizable(False, False)

shift_mode, angle_mode, history, history_window = False, "rad", [], None

List = [["C", "(", ")", "DEL"], ["x²", "√x", "eˣ", "/"], ["7", "8", "9", "×"], ["4", "5", "6", "-"],["1", "2", "3", "+"], [".", "0", "^", "="]]
top = ["shift", "+/-", "S⇔D", "history"]
List_shift = [["sin(x)", "cos(x)", "tan(x)", "DEL"], ["x!", "log(x)", "ln(x)", "Abs"], ["7", "8", "9", "deg"],["4", "5", "6", "rad"], ["1", "2", "3", "grad"], ["π", "0", "^", "="]]

def disable_fullscreen(event):
    if (event.state & 0x100):
        return "break"
def copy_text():
    txt.clipboard_clear(),
    txt.clipboard_append(txt.get(tk.SEL_FIRST, tk.SEL_LAST))
def paste_text():
    txt.insert(tk.INSERT, txt.clipboard_get())
def show_context_menu(event):
    context_menu.post(event.x_root, event.y_root)

calculator.bind("<F11>", disable_fullscreen)
def button_click(character):
    pos = txt.index(INSERT)
    actions = {
        "DEL": lambda: pos != '1.0' and txt.delete(f"{pos} - 1 chars", pos),
        "C": lambda: txt.delete("1.0", END),
        "x²": lambda: txt.insert(pos, "^2"),
        "eˣ": lambda: (txt.insert(pos, "exp()"), txt.mark_set(INSERT, f"{pos} + 4 chars")),
        "√x": lambda: (txt.insert(pos, "√()"), txt.mark_set(INSERT, f"{pos} + 2 chars")),
        "=": calculate,
        "S⇔D": s_and_d,
        "+/-": change_positive_negative,
        "shift": toggle_shift,
        "Abs": absolut,
        "ln(x)": lambda: (txt.insert(pos, "ln()"), txt.mark_set(INSERT, f"{pos} + 3 chars")),
        "log(x)": lambda: (txt.insert(pos, "log()"), txt.mark_set(INSERT, f"{pos} + 4 chars")),
        "x!": lambda: (txt.insert(pos, "()!"), txt.mark_set(INSERT, f"{pos} + 1 chars")),
        "sin(x)": lambda: (txt.insert(pos, "sin()"), txt.mark_set(INSERT, f"{pos} + 4 chars")),
        "cos(x)": lambda: (txt.insert(pos, "cos()"), txt.mark_set(INSERT, f"{pos} + 4 chars")),
        "tan(x)": lambda: (txt.insert(pos, "tan()"), txt.mark_set(INSERT, f"{pos} + 4 chars")),
        "rad": lambda: set_angle_mode("rad"),
        "deg": lambda: set_angle_mode("deg"),
        "grad": lambda: set_angle_mode("grad"),
        "history": show_history
    }
    actions.get(character, lambda: txt.insert(pos, character))()
    update_buttons()
def calculate():
    try:
        expression = txt.get("1.0", END).strip().replace("×", "*").replace("π", "pi").replace("^", "**").replace("sp.exp", "np.exp").replace("√", "sqrt")

        # Handle factorials
        while '!' in expression:
            idx = expression.index('!')
            num_end = idx - 1
            if expression[num_end] == ')':
                num_start = expression.rindex('(', 0, num_end)
                num = expression[num_start + 1:num_end]
                fact_result = str(mp.factorial(int(num)))
                expression = expression[:num_start] + fact_result + expression[idx + 1:]
            else:
                num_start = num_end
                while num_start >= 0 and (expression[num_start].isdigit() or expression[num_start] == '.'):
                    num_start -= 1
                num = expression[num_start + 1:idx]
                fact_result = str(mp.factorial(int(num)))
                expression = expression[:num_start + 1] + fact_result + expression[idx + 1:]

        if not expression or '=' in expression or expression.count('(') != expression.count(')'):
            raise ValueError("Invalid expression")
        expression = convert_angles(expression)
        result = sp.sympify(expression).evalf()
        result_str = format(result, '.12f').rstrip('0').rstrip('.')

        history.append(f"{expression} = {result_str}")
        if len(history) > 5:
            history.pop(0)

        txt.delete("1.0", "end")
        txt.insert("1.0", result_str)

    except Exception:
        txt.delete("1.0", "end")
        txt.insert("1.0", "Error")
def toggle_shift():
    global shift_mode
    shift_mode = not shift_mode
    update_buttons()
def update_buttons():
    global shift_mode
    button_list = List_shift if shift_mode else List
    shift_button.config(fg="green" if shift_mode else "white")

    for i in range(4):
        for j in range(6):
            button_text = button_list[j][i]
            buttons[i][j].config(text=button_text, command=lambda btn=button_text: button_click(btn))

    for mode in ["deg", "rad", "grad"]:
        if shift_mode:
            angle_buttons[mode].grid()
        else:
            angle_buttons[mode].grid_remove()
        update_angle_button_color(mode)
def update_angle_button_color(mode):
    angle_buttons[mode].config(fg="green" if mode == angle_mode else "White")
def set_angle_mode(mode):
    global angle_mode
    angle_mode = mode
    update_buttons()
def convert_angles(expression):
    if angle_mode in ["grad", "deg"]:
        factor = {"grad": "pi/200", "deg": "pi/180"}[angle_mode]
        expression = expression.replace("sin(", f"sin({factor} * ").replace("cos(", f"cos({factor} * ").replace("tan(", f"tan({factor} * ")
    return expression
def s_and_d():
    try:
        current_text = txt.get("1.0", END).strip()
        result = float(Fraction(current_text)) if "/" in current_text else Fraction(current_text).limit_denominator()
        txt.delete("1.0", END)
        txt.insert("1.0", "{:.15g}".format(result) if isinstance(result, float) else str(result))
    except ValueError:
        txt.delete("1.0", END)
        txt.insert("1.0", "Invalid input")
def absolut():
    current_text = txt.get("1.0", END).strip()
    try:
        txt.delete("1.0", END)
        txt.insert("1.0", str(abs(float(current_text))))
    except ValueError:
        txt.delete("1.0", END)
        txt.insert("1.0", "Invalid input")
def change_positive_negative():
    current_text = txt.get("1.0", END).strip()
    try:
        txt.delete("1.0", END)
        txt.insert("1.0", str(-float(current_text)))
    except ValueError:
        txt.delete("1.0", END)
        txt.insert("1.0", "Invalid input")
def show_history():
    global history_window
    if history_window and history_window.winfo_exists():
        history_window.destroy()
        toggle_history_button_text(False)
        return

    history_window = Toplevel(calculator)
    history_window.geometry("292x300+0+205")
    history_window.overrideredirect(True)
    history_window.configure(bg="grey14")

    Label(history_window, text="History", font=("Courier New", 21, "underline"), bg="grey14", fg="white").pack(pady=5)

    history_text = Text(history_window, height=11, width=29, font=("Courier New", 15), bg="grey14", fg="white", highlightthickness=0, bd=0)
    history_text.pack(pady=5)
    history_text.insert(END, "\n\n".join(history))

    history_context_menu = Menu(history_window, tearoff=0)
    history_context_menu.add_command(label="Copy", command=lambda: history_window.clipboard_append(history_text.get(tk.SEL_FIRST, tk.SEL_LAST)))
    history_text.bind("<Button-3>", lambda event: history_context_menu.post(event.x_root, event.y_root))

    update_history_window_position()
    calculator.bind("<Configure>", lambda e: update_history_window_position())
    toggle_history_button_text(True)
def toggle_history_button_text(opened):
    top_row[-1].config(text="History")
def update_history_window_position():
    if history_window and isinstance(history_window, tk.Toplevel) and history_window.winfo_exists():
        x, y = calculator.winfo_x(), calculator.winfo_y()
        history_window.geometry(f"292x300+{x + 8}+{y + 175}")
def on_key_press(event):
    key_pressed = event.keysym
    if key_pressed == "BackSpace":
        button_click("DEL")
    elif key_pressed.isdigit() or key_pressed in "e/+-^()π.!*":
        button_click(key_pressed.replace("*", "×"))
    return "break"

txt = tk.Text(calculator, height=1.5, width=17, font=("Courier New", 21), bg="grey14", fg="white", highlightthickness=0,bd=0)
txt.grid(row=0, column=0, columnspan=4, padx=1, pady=7)
txt.configure(insertbackground="white")
txt.tag_configure("center", justify="center")
txt.bind("<Key>", on_key_press)

context_menu = tk.Menu(calculator, tearoff=0)
context_menu.add_command(label="copy", command=copy_text)
context_menu.add_command(label="insert", command=paste_text)
txt.bind("<Button-3>", show_context_menu)

buttons = []
for i in range(4):
    row = []
    for j in range(6):
        button_name = List[j][i]
        bg_color = "grey33" if button_name.isdigit() else "gray23"
        button = tk.Button(calculator, text=button_name, height="3", width="9",
                           command=lambda btn=button_name: button_click(btn), bg=bg_color, fg="white",
                           highlightthickness=0, bd=0)
        button.grid(row=j + 2, column=i, padx=1, pady=3)
        row.append(button)
    buttons.append(row)

top_row = [tk.Button(calculator, text=button_name, height="1", width="9", command=lambda btn=button_name: button_click(btn),bg="gray14", fg="white", highlightthickness=0, bd=0) for button_name in top]

for k, button in enumerate(top_row):
    button.grid(row=1, column=k, padx=1, pady=3)

shift_button = tk.Button(calculator, text="shift", height="1", width="9", command=lambda: button_click("shift"),bg="gray14", fg="white", highlightthickness=0, bd=0)
shift_button.grid(row=1, column=0, columnspan=1, padx=1, pady=3)

angle_buttons = {}
for mode, column in zip(["deg", "rad", "grad"], range(4, 7)):
    angle_buttons[mode] = tk.Button(calculator, text=mode, height="3", width="9",command=lambda m=mode: button_click(m), bg="gray23", fg="white",highlightthickness=0, bd=0)
    angle_buttons[mode].grid(row=column, column=3, padx=1, pady=3)
    angle_buttons[mode].grid_remove()
calculator.mainloop()